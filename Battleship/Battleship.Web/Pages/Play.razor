@page "/"

<PageTitle>Play</PageTitle>

<div class="container">
    <div class="left-panel">
        <h1>Battlefield</h1>
        <GridComponent Rows="@rows" Cols="@cols" ClickAction="@((_, _) => {})" HoverAction="@((_, _) => {})" LeaveAction="@((_, _) => {})" @ref="gridComponent" />
        <div style="height: 20px" />
        <ConsoleComponent Capacity="10" @ref=consoleComponent />
    </div>
    <div class="vsep" />
    <div class="right-panel">
        <h1>Controls</h1>
        <div>
            <div class="row" style="background-color: honeydew">
                <textarea style="width: 300px" rows="3" disabled="@locked" @bind=dump />
            </div>
            <div class="row" style="background-color: honeydew">
                <button class="form-button" disabled="@locked" onclick="@ImportScenario">Import</button>
            </div>
            <div class="hsep" />
            <div class="row" style="height: 200px">
                <div class="grid-container" style="background-color: lavenderblush">
                    <button class="navigation north" style="@($"transform: rotate({rotationDegrees[Ship.Direction.North]}deg);")" disabled="@(!locked || spy is null || spy.Facing == Ship.Direction.South)" @onclick="() => Navigate(Ship.Direction.North)">@currentTexts[Ship.Direction.North]</button>
                    <button class="navigation west" style="@($"transform: rotate({rotationDegrees[Ship.Direction.West]}deg);")" disabled="@(!locked || spy is null || spy.Facing == Ship.Direction.East)" @onclick="() => Navigate(Ship.Direction.West)">@currentTexts[Ship.Direction.West]</button>
                    <button class="navigation east" style="@($"transform: rotate({rotationDegrees[Ship.Direction.East]}deg);")" disabled="@(!locked || spy is null || spy.Facing == Ship.Direction.West)" @onclick="() => Navigate(Ship.Direction.East)">@currentTexts[Ship.Direction.East]</button>
                    <button class="navigation south" style="@($"transform: rotate({rotationDegrees[Ship.Direction.South]}deg);")" disabled="@(!locked || spy is null || spy.Facing == Ship.Direction.North)" @onclick="() => Navigate(Ship.Direction.South)">@currentTexts[Ship.Direction.South]</button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .form-button {
        width: 80px;
        height: 30px;
        line-height: 10px;
        font-size: medium;
        text-align: center;
        padding: 10px;
    }

    .grid-container {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-rows: 1fr 1fr 1fr;
        gap: 10px;
    }

    .navigation {
        width: 50px;
        height: 50px;
        font: large;
    }

    .north {
        grid-column: 2;
        grid-row: 1;
    }

    .west {
        grid-column: 1;
        grid-row: 2;
    }

    .east {
        grid-column: 3;
        grid-row: 2;
    }

    .south {
        grid-column: 2;
        grid-row: 3;
    }

    .choices {
        width: 50%;
        text-align: left;
        padding: 10px;
        background-color: lightblue;
    }

    .row {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 10px;
        gap: 15px;
    }

    span {
        width: 70px;
    }

    input {
        width: 35px;
    }

    .container {
        display: flex;
        height: 90vh;
    }

    .left-panel {
        flex-grow: 1;
        padding: 10px;
        text-align: center;
    }

    .vsep {
        width: 2px;
        margin-left: 50px;
        margin-right: 50px;
        background-color: gray;
    }

    .hsep {
        width: 100%;
        height: 2px;
        background-color: gray;
    }

    .right-panel {
        width: 400px;
        padding: 10px;
        text-align: center;
    }
</style>

@code {
    public const string ClearChar = "\u200B";
    public const string ClearColor = "White";

    private int rows = 10;
    private int cols = 15;

    private GridComponent? gridComponent;
    private ConsoleComponent? consoleComponent;

    private string dump = "";
    private bool locked = false;
    private Grid.Grid<Navigation.Sector>? grid;

    private List<Ship.Ship> ships = [];
    private Ship.Ship? spy = null;
    private Ship.Direction nextCW = Navigation.getNextDirection(Ship.Direction.North, Navigation.Rotation.Clockwise);
    private Ship.Direction nextCCW = Navigation.getNextDirection(Ship.Direction.North, Navigation.Rotation.Counterclockwise);

    private readonly Dictionary<Ship.Direction, int> rotationDegrees = new()
    {
        { Ship.Direction.North, 0 },
        { Ship.Direction.South, 0 },
        { Ship.Direction.East, 0 },
        { Ship.Direction.West, 0 },
    };
    private readonly Dictionary<Navigation.Rotation, string> rotations = new()
    {
        { Navigation.Rotation.Clockwise, "⭮" },
        { Navigation.Rotation.Counterclockwise, "⭯" },
    };
    private readonly Dictionary<Ship.Direction, string> directions = new()
    {
        { Ship.Direction.North, "↑" },
        { Ship.Direction.South, "↓" },
        { Ship.Direction.East, "→" },
        { Ship.Direction.West, "←" },
    };
    private readonly Dictionary<Ship.Direction, string> currentTexts = new()
    {
        { Ship.Direction.North, "↑" },
        { Ship.Direction.South, "↓" },
        { Ship.Direction.East, "→" },
        { Ship.Direction.West, "←" },
    };

    private void ImportScenario()
    {
        Battlefield.Data data = Serialization.loadData(dump);
        (rows, cols) = data.Dims;
        gridComponent?.ForceRefresh(rows, cols);

        ships = data.Ships.ToList();
        foreach (Ship.Ship ship in ships)
        {
            if (ship.Name == Ship.Name.Spy)
            {
                spy = ship;
                UpdateNavigationTexts();
            }

            DrawShip(ship);
        }
        
        grid = Battlefield.loadData(data);
        locked = true;
    }

    private void Navigate(Ship.Direction direction)
    {
        if (spy is not null)
        {
            if (direction == spy.Facing)
            {
                MoveForward();
            }
            else
            {
                if (direction == nextCW)
                {
                    RotateForward(Navigation.Rotation.Clockwise);
                }
                else if (direction == nextCCW)
                {
                    RotateForward(Navigation.Rotation.Counterclockwise);
                }
                else
                {
                    consoleComponent?.AddMessage("Unexpected error.");
                }
            }
        }
    }

    private void MoveForward()
    {
        if (Navigation.canMoveForward(spy, grid))
        {
            EraseShip(spy!);

            spy = Navigation.moveForward(spy);
            grid = Battlefield.replaceShip(spy, grid);

            DrawShip(spy);
        }
        else
        {
            consoleComponent?.AddMessage("Cannot move forward.");
        }
    }

    private void RotateForward(Navigation.Rotation rotation)
    {
        if (Navigation.canRotateForward(spy, rotation, grid))
        {
            EraseShip(spy!);

            spy = Navigation.rotateForward(spy, rotation);
            grid = Battlefield.replaceShip(spy, grid);

            DrawShip(spy);

            ResetNavigationTexts();
            UpdateNavigationTexts();
        }
        else
        {
            consoleComponent?.AddMessage($"Cannot rotate forward in rotation={rotation}.");
        }
    }

    private void EraseShip(Ship.Ship ship)
    {
        foreach (Tuple<int, int> coord in ship.Coords)
        {
            gridComponent?.UpdateColor(coord.Item1, coord.Item2, ClearColor);
        }
        gridComponent?.UpdateText(ship.Center.Item1, ship.Center.Item2, ClearChar);
    }

    private void DrawShip(Ship.Ship ship)
    {
        foreach (Tuple<int, int> coord in ship.Coords)
        {
            string color = Conversion.colorToString(Conversion.nameToColor(ship.Name));
            gridComponent?.UpdateColor(coord.Item1, coord.Item2, color);
        }
        gridComponent?.UpdateText(ship.Center.Item1, ship.Center.Item2, directions[ship.Facing]);
    }

    private void ResetNavigationTexts()
    {
        currentTexts[nextCW] = directions[nextCW];
        currentTexts[nextCCW] = directions[nextCCW];
        rotationDegrees[nextCW] = 0;
        rotationDegrees[nextCCW] = 0;
    }

    private void UpdateNavigationTexts()
    {
        nextCW = Navigation.getNextDirection(spy!.Facing, Navigation.Rotation.Clockwise);
        nextCCW = Navigation.getNextDirection(spy.Facing, Navigation.Rotation.Counterclockwise);

        currentTexts[nextCW] = rotations[Navigation.Rotation.Clockwise];
        currentTexts[nextCCW] = rotations[Navigation.Rotation.Counterclockwise];
        int degrees = Navigation.getDegrees(spy.Facing);
        rotationDegrees[nextCW] = degrees;
        rotationDegrees[nextCCW] = degrees;
    }
}

